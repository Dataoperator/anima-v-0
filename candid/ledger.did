type Tokens = record {
    e8s : nat64;
};

type TimeStamp = record {
    timestamp_nanos: nat64;
};

type TransferArgs = record {
    memo: nat64;
    amount: Tokens;
    fee: Tokens;
    from_subaccount: opt vec nat8;
    to: text;
    created_at_time: opt TimeStamp;
};

type BlockIndex = nat64;

type TransferResult = variant {
    Ok: BlockIndex;
    Err: TransferError;
};

type TransferError = variant {
    BadFee: record { expected_fee: Tokens; };
    InsufficientFunds: record { balance: Tokens; };
    TxTooOld: record { allowed_window_nanos: nat64; };
    TxCreatedInFuture;
    TxDuplicate: record { duplicate_of: BlockIndex; };
};

type Account = record {
    owner: principal;
    subaccount: opt vec nat8;
};

type AccountBalanceArgs = record {
    account: Account;
};

service : {
    transfer : (TransferArgs) -> (TransferResult);
    account_balance : (AccountBalanceArgs) -> (Tokens) query;
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_metadata : () -> (vec record { text; text }) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_fee : () -> (nat) query;
    icrc1_balance_of : (Account) -> (nat) query;
}